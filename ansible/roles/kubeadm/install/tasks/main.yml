---
# This role will install kubernetes packages to bootstrap kubernetes cluster

# Swap disabled. You MUST disable swap in order for the kubelet to work properly
- name: Remove swapfile from /etc/fstab
  mount:
    name: swap
    fstype: swap
    state: absent

- name: Disable swap
  command: swapoff -a

# Disabling SELinux by running setenforce 0 is required to allow containers to access the host filesystem, which is required by pod networks for example. You have to do this until SELinux support is improved in the kubelet.
- name: Disable selinux
  selinux:
    state: disabled

- name: force selinux setenforce 0
  command: setenforce 0

# Some users on RHEL/CentOS 7 have reported issues with traffic being routed incorrectly due to iptables being bypassed. You should ensure net.bridge.bridge-nf-call-iptables is set to 1 in your sysctl config, e.g.

- name: Add br_netfilter module
  modprobe:
    name: br_netfilter
    state: present

- name: Set sysctl net.bridge.bridge-nf-call-ip6tables net.bridge.bridge-nf-call-iptables
  sysctl:
    name: "{{ item }}"
    value: 1
    sysctl_set: "yes"
    state: present
  loop:
    - "net.bridge.bridge-nf-call-ip6tables"
    - "net.bridge.bridge-nf-call-iptables"

- name: Copy kubernetes repo
  copy:
    src: kubernetes.repo
    dest: /etc/yum.repos.d/kubernetes.repo
    mode: 0644

# You will install these packages on all of your machines:
#kubeadm: the command to bootstrap the cluster.
#kubelet: the component that runs on all of the machines in your cluster and does things like starting pods and containers.
#kubectl: the command line util to talk to your cluster.
#kubeadm will not install or manage kubelet or kubectl for you, so you will need to ensure they match the version of the Kubernetes control panel you want kubeadm to install for you. If you do not, there is a risk of a version skew occurring that can lead to unexpected, buggy behaviour. However, one minor version skew between the kubelet and the control plane is supported, but the kubelet version may never exceed the API server version. For example, kubelets running 1.7.0 should be fully # compatible with a 1.8.0 API server, but not vice versa.

- name: Add rpm key for kubernetes repository
  rpm_key:
   state: present
   key: "{{ item }}"
  loop:
    - "https://packages.cloud.google.com/yum/doc/yum-key.gpg"
    - "https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg"

# Workaround for rpm_key is not importing the pub keys https://github.com/ansible/ansible/issues/20711 fixed in ansible version 2.6
#- name: Make yum cache as workaround after importing rpm_key
#  command: "yum -q makecache -y --disablerepo='*' --enablerepo='kubernetes'"

- name: Install kubernetes packages
  yum:
   state: present
   name: "{{ item }}"
   enablerepo: kubernetes
   update_cache: yes
  loop:
    - "kubeadm-{{ kube_version}}"
    - "kubelet-{{ kube_version}}"
    - "kubectl-{{ kube_version}}"

# The kubelet is now restarting every few seconds, as it waits in a crashloop for kubeadm to tell it what to do.
- name: Start kubelet
  systemd:
    name: kubelet
    enabled: yes
    masked: no
    state: started
